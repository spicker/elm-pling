Elm.Matrix = Elm.Matrix || {};
Elm.Matrix.make = function (_elm) {
   "use strict";
   _elm.Matrix = _elm.Matrix || {};
   if (_elm.Matrix.values) return _elm.Matrix.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var filter = function (f) {
      return function (_p0) {
         return A2($Array.filter,
         function (_p1) {
            return $Basics.not($Array.isEmpty(_p1));
         },
         A2($Array.map,function (bss) {    return A2($Array.filter,f,bss);},_p0));
      };
   };
   var map = function (f) {    return $Array.map(function (a) {    return A2($Array.map,f,a);});};
   var fold = F3(function (f,b,mat) {    return A3($Array.foldl,F2(function (a,bs) {    return A3($Array.foldl,f,bs,a);}),b,mat);});
   var set = F3(function (_p2,a,mat) {
      var _p3 = _p2;
      var _p5 = _p3._0;
      var _p4 = A2($Array.get,_p5,mat);
      if (_p4.ctor === "Nothing") {
            return mat;
         } else {
            return A3($Array.set,_p5,A3($Array.set,_p3._1,a,_p4._0),mat);
         }
   });
   var get = F2(function (_p6,mat) {    var _p7 = _p6;return A2($Maybe.andThen,A2($Array.get,_p7._0,mat),$Array.get(_p7._1));});
   var append = $Array.append;
   var isEmpty = $Array.isEmpty;
   var length = function (mat) {
      var b = $Array.length(A2($Maybe.withDefault,$Array.empty,A2($Array.get,0,mat)));
      var a = $Array.length(mat);
      return {ctor: "_Tuple2",_0: a,_1: b};
   };
   var repeat = F2(function (_p8,a) {    var _p9 = _p8;return A2($Array.repeat,_p9._0,A2($Array.repeat,_p9._1,a));});
   var t1 = A2(repeat,{ctor: "_Tuple2",_0: 2,_1: 2},1);
   var testfold = A3(fold,F2(function (x,y) {    return x + y;}),0,t1);
   var empty = $Array.empty;
   return _elm.Matrix.values = {_op: _op
                               ,empty: empty
                               ,repeat: repeat
                               ,length: length
                               ,isEmpty: isEmpty
                               ,append: append
                               ,get: get
                               ,set: set
                               ,fold: fold
                               ,map: map
                               ,filter: filter
                               ,t1: t1
                               ,testfold: testfold};
};